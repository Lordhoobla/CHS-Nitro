//5.1.4

public class DNA{private String rsid;private String genotype;public DNA(String s,String g){rsid=s;genotype=g;}}

//5.1.5

public class Employee{private String name;private int id;private double salary;public Employee(String n,int i,double s){name=n;id=i;salary=s;}}

//5.1.6

/*CIRCLE CLASS*/public class Circle{private double radius;public Circle(double myRadius){radius=myRadius;}public void setRadius(double myRadius){radius=myRadius;}public double getDiameter(){return radius*2;}public double getRadius(){return radius;}public double getPerimeter(){return Math.PI*getDiameter();}public String toString(){return "Circle with a radius of "+radius;}}
/*MAIN CLASS*/public class CircleTester{public static void main(String[] args){Circle circ=new Circle(10);circ.setRadius(5);System.out.println(circ);System.out.println("The diameter is "+circ.getDiameter());System.out.println("The perimeter is "+circ.getPerimeter());}}

//5.2.5

/*BASEBALLPLAYER CLASS*/public BaseballPlayer(String nam,int hit,int bat){name=nam;hits=hit;atBats=bat;}
/*MAIN CLASS*/babeRuth.printBattingAverage();

//5.2.6

/*PUT INSIDE DOG CLASS*/public Dog(String n,int a,double w){name=n;age=a;weight=w;}public Dog(String n,int a){name=n;age=a;weight=0.0;}
/*PUT INSIDE MAIN METHOD*/System.out.println(new Dog("Karel",7,15.6)+"\n"+new Dog("Clover",9));

//5.2.7

/*PUT IN STUDENT CLASS*/public Student(String f,String l,int g,String s){firstName=f;lastName=l;gradeLevel=g;school=s;}public Student(String f,String l,int g){firstName=f;lastName=l;gradeLevel=g;if(5<g&&g<9){school="middle school";}else if(8<g&&g<13){school="high school";}else{school="elementary school";}}public String toString(){return firstName+" "+lastName+" is in grade "+gradeLevel+" and goes to "+school;}

//5.2.8

/*INSERT INTO SCHOOLCLUB CLASS*/public SchoolClub(Student s,String n){leader=s;name=n;numMembers=0;}
/*INSERT INTO MAIN METHOD*/System.out.println(new SchoolClub(alan,"well"));
/*INSERT INTO STUDENT CLASS*/public Student(String f,String l,int g,String s){firstName=f;lastName=l;gradeLevel=g;school=s;}public Student(String f,String l,int g){firstName=f;lastName=l;gradeLevel=g;if(5<g&&g<9){school="middle school";}else if(8<g&&g<13){school="high school";}else{school="elementary school";}}public String toString(){return firstName+" "+lastName+" is in grade "+gradeLevel+" and goes to "+school;}

/*5.4.5

/*INSERT INTO TEXTMESSAGE CLASS*/public String getMessage(){return message;}public String getSender(){return sender;}public String getReceiver(){return receiver;}

//5.4.6

/*INSERT INTO DRAGON CLASS*/public Dragon(int l,String a){attack=a;level=l;}public String getAttack(){return attack;}public int getLevel(){return level;};public String fight(){String s="";for(int i=0;i<level;i++){s+=attack;}return s;}

//5.4.7

/*INSERT INTO DRAGON CLASS*/public Dragon(String n,int l){name=n;level=l;if(l>69){canBreatheFire=true;}}public String getName(){return name;}public int getLevel(){return level;}public boolean isFireBreather(){return canBreatheFire;}public void attack(){if(canBreatheFire){System.out.println(">>>>>>>>>>\n>>>>>>>>>>>>>>\n>>>>>>>>>>>>>>\n>>>>>>>>>>");}else{System.out.println("~ ~ ~");}}public void gainExperience(){level+=10;if(level>69){canBreatheFire=true;}}

//5.4.8

/*MEAL CLASS*/public class Meal{private String name,recipe;private int calories;public Meal(String n,int c,String r){name=n;recipe=r;calories=c;}public String getName(){return name;}public String getRecipe(){return recipe;}public int getCalories(){return calories;}public String toString(){return name+", which has "+calories+" calories.";}}
/*CHEF CLASS*/public class Chef{private String name,resturant;private Meal best;public Chef(String n,String r,Meal b){name=n;resturant=r;best=b;}public String getName(){return name;}public String getRestaurant(){return resturant;}public int getMealCalories(){return best.getCalories();}public String getMealRecipe(){return best.getRecipe();}public String getMealName(){return best.getName();}public String toString(){return "Chef "+name+" works at "+resturant+" and is best known for "+best;}}
/*INSERT INTO MAIN METHOD*/System.out.println(new Chef("Karel","Chuck E Cheese",new Meal("Toast",100,"Put in toaster for 3 mins")));

//5.5.5

/*INSERT INTO RECTANGLE CLASS*/public int getWidth(){return width;}public void setWidth(int w){width=w;}public int getHeight(){return height;}public void setHeight(int h){height=h;}public int getArea(){return height*width;}public int getPerimeter(){return 2*(height+width);}public String toString(){return "Rectangle width: "+width+", Rectangle height: "+height;}

//5.5.6

public class Fraction{private int num,den;public Fraction(int n,int d){num=n;den=d;}public int getNumerator(){return num;}public int getDenominator(){return den;}public void setNumerator(int x){num=x;}public void setDenominator(int x){den=x;}public void add(Fraction other){num=num*other.getDenominator()+other.getNumerator()*den;den*=other.getDenominator();}public void subtract(Fraction other){num=num*other.getDenominator()-other.getNumerator()*den;den*=other.getDenominator();}public void multiply(Fraction other){num*=other.getNumerator();den*=other.getDenominator();}public String toString(){return num+" / "+den;}}

//5.5.7

public class Routine{private double sleep,fun,school,sports;public Routine(){sleep=fun=school=sports=0.0;}public void setSleep(double hoursSleep){sleep=hoursSleep*7;}public void setFun(double hoursFun){fun=hoursFun*7;}public void setSchool(double hoursSchool){school=7*hoursSchool;}public void setSports(double hoursSports){sports=7*hoursSports;}public void printTotal(){System.out.println("Weekly Totals\nSleep: "+sleep+"\nSchool: "+school+"\nSports: "+sports+"\nFun: "+fun+"\nGrand Total: "+(school+sports+fun+sleep)+"\nHours left over: "+(168.0-(school+fun+sleep+sports)));}}

//5.6.5

/*DISTANCE CLASS*/public class Distance{private double miles;public Distance(double startMiles){miles=startMiles;}public double toKilometers(){return miles/.62137;}public double toYards(){return miles*1760;}public double toFeet(){return miles*5280;}public double getMiles(){return miles;}}
/*INSERT INTO MAIN METHOD*/System.out.println(new Distance(5).toYards()+"\n"+new Distance(10).toKilometers()+"\n"+new Distance(12).toFeet());

//5.6.6

/*FOOD CLASS*/public class Food{private String name;private int calories;public Food(String n,int c){name=n;calories=c;}public String getName(){return name;}public int getCalories(){return calories;}public void setName(String n){name=n;}public void setCalories(int c){calories=c;}public String toString(){return name+" have "+calories+" calories";}}
/*INSERT INTO MAIN METHOD*/Scanner s=new Scanner(System.in);Food h=new Food("Hamburgers",600);System.out.println(h+"\nHow many would you like?");int hm=s.nextInt();Food f=new Food("French fries",350);System.out.println(f+"\nHow many would you like?");int fm=s.nextInt();Food c=new Food("Coke",200);System.out.println(c+"\nHow many would you like?");int cm=s.nextInt();System.out.println("Your meal will have a total of "+(hm*h.getCalories()+fm*f.getCalories()+cm*c.getCalories())+" calories");

//5.6.7

/*CAR CLASS*/public class Car{private double efficiency,gas,tankCapacity,totalMilesDriven;public Car(double carEfficiency,double carTankCapacity){efficiency=carEfficiency;tankCapacity=carTankCapacity;}public void addGas(){gas=tankCapacity;System.out.println("Filling up ...");}public void addGas(double g){gas+=g;if(gas>tankCapacity){gas=tankCapacity;}System.out.println("Adding gas ...");}public double getTotalMilesDriven(){return totalMilesDriven;}public double getGas(){return gas;}public boolean canDrive(double distance){return milesAvailable()>=distance;}public double milesAvailable(){return efficiency*gas;}public void drive(double distance){if(canDrive(distance)){totalMilesDriven+=distance;System.out.println("Driving "+distance);gas-=distance/efficiency;}else{System.out.println("Can't drive "+distance+". That's too far!");}}}
/*INSERT INTO MAIN METHOD*/Car x=new Car(20,15);x.addGas();System.out.println("Miles available: "+x.milesAvailable());x.drive(100);System.out.println("Miles available: "+x.milesAvailable());x.addGas(2);System.out.println("Miles available: "+x.milesAvailable());x.drive(1000);x.drive(200);System.out.println("Gas remaining: "+x.getGas()+"\nTotal Miles Driven: "+x.getTotalMilesDriven());

//5.7.5

/*RANDOMIZER CLASS*/public class Randomizer{public static int nextInt(){return (int)(Math.random()*10+1);}public static int nextInt(int min,int max){return (int)(Math.random()*(max-min+1)+min);}}

